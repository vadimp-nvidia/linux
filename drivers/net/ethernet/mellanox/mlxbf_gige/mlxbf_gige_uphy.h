/* SPDX-License-Identifier: GPL-2.0-only OR BSD-3-Clause */

/* UPHY support for Mellanox Gigabit Ethernet driver
 *
 * Copyright (C) 2022 NVIDIA CORPORATION & AFFILIATES
 */

#ifndef __MLXBF_GIGE_UPHY_H__
#define __MLXBF_GIGE_UPHY_H__

#include <linux/bitfield.h>

/* Some registers' values depend on the p1clk clock. The following
 * formula applies:
 * ((time_in_ns*const_factor)/MLXBF_GIGE_TIME_FACTOR_TO_USEC)
 */
#define MLXBF_GIGE_TIME_FACTOR_TO_USEC          10000

/* All addresses represent the offset from the base PLU address */

#define MLXBF_GIGE_PLU_POWERUP                        0x488
#define MLXBF_GIGE_PLU_TX_POWERUP_MASK                GENMASK(28, 28)
#define MLXBF_GIGE_PLU_RX_POWERUP_MASK                GENMASK(27, 27)

#define MLXBF_GIGE_LANE_CFG_FLAT0_BASE                0x23000
#define MLXBF_GIGE_AE_SYS_IMEM_RAM_DATA_CTRL_WDATA    0x23ef8
#define MLXBF_GIGE_AE_SYS_IMEM_RAM_STAT_IMEM_CSUM_STS 0x23f00
#define MLXBF_GIGE_IMEM_CSUM_STATUS_MASK              GENMASK(6, 5)
#define MLXBF_GIGE_IMEM_CSUM_STATUS_SHIFT             5

#define MLXBF_GIGE_PLL_CFG_FLAT0_BASE                         0x25000
#define MLXBF_GIGE_PLL_CFG_FLAT0_MGMT_BGAP_FUSE_CTRL          0x251d8
#define MLXBF_GIGE_PLL_MGMT_BGAP_FUSE_CTRL_BG_TRIM_SHIFT      0
#define MLXBF_GIGE_PLL_MGMT_BGAP_FUSE_CTRL_CVB_TRIM_SHIFT     4
#define MLXBF_GIGE_PLL_MGMT_BGAP_FUSE_CTRL_SPEEDO_SHIFT       8
#define MLXBF_GIGE_PLL_MGMT_BGAP_FUSE_CTRL_BG_TRIM_VLD_SHIFT  12
#define MLXBF_GIGE_PLL_MGMT_BGAP_FUSE_CTRL_CVB_TRIM_VLD_SHIFT 13
#define MLXBF_GIGE_PLL_MGMT_BGAP_FUSE_CTRL_SPEEDO_VLD_SHIFT   14

#define MLXBF_GIGE_LANE_TX_FSM_CTRL                0x26000
#define MLXBF_GIGE_LANE_TX_FSM_PS_MASK             GENMASK(3, 0)

#define MLXBF_GIGE_LANE_TX_BITS_SWAP               0x2600c
#define MLXBF_GIGE_TX_EB_BLOCK_PUSH_DIST_MASK_MASK GENMASK(20, 16)
#define MLXBF_GIGE_TX_EB_BLOCK_PUSH_DIST_MASK_VAL  \
	FIELD_PREP(MLXBF_GIGE_TX_EB_BLOCK_PUSH_DIST_MASK_MASK, 0x3)
#define MLXBF_GIGE_LANE_TX_BITS_SWAP_MASK          GENMASK(0, 0)

#define MLXBF_GIGE_LANE_TX_DATA_EN                 0x26010
#define MLXBF_GIGE_LANE_TX_RATE_ID_MASK            GENMASK(30, 28)
#define MLXBF_GIGE_LANE_TX_DATA_EN_MASK            GENMASK(23, 23)
#define MLXBF_GIGE_LANE_TX_IDDQ_VAL_MASK           GENMASK(21, 21)
#define MLXBF_GIGE_LANE_TX_PERIODIC_CAL_EN_MASK    GENMASK(17, 17)

#define MLXBF_GIGE_LANE_TX_RATE_ID0_SPEED          0x26014
#define MLXBF_GIGE_LANE_TX_SLEEP_VAL_MASK          GENMASK(9, 8)
#define MLXBF_GIGE_LANE_TX_RATE_ID0_SPEED_MASK     GENMASK(2, 0)

#define MLXBF_GIGE_LANE_TX_CAL                     0x26018
#define MLXBF_GIGE_LANE_TX_CAL_MASK                GENMASK(0, 0)

#define MLXBF_GIGE_LANE_RX_FSM_CTRL                0x26040
#define MLXBF_GIGE_LANE_RX_FSM_PS_MASK             GENMASK(3, 0)

#define MLXBF_GIGE_LANE_RX_EQ_DONE_TIMER_EN        0x26054
#define MLXBF_GIGE_LANE_RX_EQ_DONE_TIMER_EN_MASK   GENMASK(31, 31)
#define MLXBF_GIGE_LANE_RX_CAL_DONE_TIMER_EN_MASK  GENMASK(30, 30)

#define MLXBF_GIGE_LANE_RX_RATE_ID                 0x26058
#define MLXBF_GIGE_LANE_RX_RATE_ID0_SPEED_MASK     GENMASK(18, 16)
#define MLXBF_GIGE_LANE_RX_RATE_ID_MASK            GENMASK(14, 12)
#define MLXBF_GIGE_LANE_RX_SLEEP_VAL_MASK          GENMASK(7, 6)
#define MLXBF_GIGE_LANE_RX_IDDQ_VAL_MASK           GENMASK(4, 4)

#define MLXBF_GIGE_LANE_RX_CAL                     0x2605c
#define MLXBF_GIGE_LANE_RX_CAL_MASK                GENMASK(0, 0)

#define MLXBF_GIGE_LANE_RX_SYNC_FIFO_POP                   0x26060
#define MLXBF_GIGE_LANE_RX_DATA_SPLIT_LSB_VLD_CHICKEN_MASK GENMASK(5, 5)
#define MLXBF_GIGE_LANE_RX_SYNC_FIFO_POP_RDY_CHICKEN_MASK  GENMASK(4, 4)
#define MLXBF_GIGE_LANE_RX_CDR_RESET_REG_MASK              GENMASK(3, 3)
#define MLXBF_GIGE_LANE_RX_CDR_EN_MASK                     GENMASK(2, 2)
#define MLXBF_GIGE_LANE_RX_DATA_EN_MASK                    GENMASK(1, 1)

#define MLXBF_GIGE_LANE_RX_EQ_TRAIN        0x26064
#define MLXBF_GIGE_LANE_RX_EQ_TRAIN_MASK   GENMASK(2, 0)
#define MLXBF_GIGE_LANE_RX_EQ_TRAIN_VAL \
	FIELD_PREP(MLXBF_GIGE_LANE_RX_EQ_TRAIN_MASK, 0x3)

#define MLXBF_GIGE_LANE_GW                 0x26100
#define MLXBF_GIGE_LANE_GW_ADDR_MASK       GENMASK(10, 1)
#define MLXBF_GIGE_LANE_GW_RW_MASK         GENMASK(11, 11)
#define MLXBF_GIGE_LANE_GW_DATA_MASK       GENMASK(27, 12)
#define MLXBF_GIGE_LANE_GW_DATA_EN_MASK    GENMASK(28, 28)
#define MLXBF_GIGE_LANE_GW_BUSY_MASK       GENMASK(30, 30)
#define MLXBF_GIGE_LANE_GW_ADDR_SHIFT      1
#define MLXBF_GIGE_LANE_GW_DESC0           0x2610c
#define MLXBF_GIGE_LANE_GW_DESC0_DATA_MASK GENMASK(15, 0)

#define MLXBF_GIGE_TX_FSM_DEFAULT_CYCLES     0x26600
#define MLXBF_GIGE_TX_FSM_DEFAULT_VAL(const_factor) \
	((200 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_TX_FSM_SLEEP_CYCLES       0x26604
#define MLXBF_GIGE_TX_FSM_SLEEP_VAL(const_factor) \
	((1000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_TX_FSM_POWERUP_CYCLES     0x26608
#define MLXBF_GIGE_TX_FSM_POWERUP_VAL(const_factor) \
	((10000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_TX_FSM_CAL_FLOW_CYCLES    0x2660c
#define MLXBF_GIGE_TX_FSM_CAL_FLOW_VAL(const_factor) \
	((200000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_TX_FSM_CAL_ABORT_CYCLES   0x26610
#define MLXBF_GIGE_TX_FSM_CAL_ABORT_VAL(const_factor) \
	((4000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)
#define MLXBF_GIGE_TX_FSM_CAL_ABORT_MASK     GENMASK(18, 0)

#define MLXBF_GIGE_RX_FSM_DEFAULT_CYCLES     0x26614
#define MLXBF_GIGE_RX_FSM_DEFAULT_VAL(const_factor) \
	((200 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_RX_FSM_SLEEP_CYCLES       0x26618
#define MLXBF_GIGE_RX_FSM_SLEEP_VAL(const_factor) \
	((1000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_RX_FSM_POWERUP_CYCLES     0x2661c
#define MLXBF_GIGE_RX_FSM_POWERUP_VAL(const_factor) \
	((10000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_RX_FSM_TERM_CYCLES        0x26620
#define MLXBF_GIGE_RX_FSM_TERM_VAL(const_factor) \
	((200000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_RX_FSM_CAL_FLOW_CYCLES    0x26624
#define MLXBF_GIGE_RX_FSM_CAL_FLOW_VAL(const_factor) \
	((200000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_RX_FSM_CAL_ABORT_CYCLES   0x26628
#define MLXBF_GIGE_RX_FSM_CAL_ABORT_VAL(const_factor) \
	((4000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_RX_FSM_EQ_FLOW_CYCLES     0x2662c
#define MLXBF_GIGE_RX_FSM_EQ_FLOW_VAL(const_factor) \
	((48000000 / MLXBF_GIGE_TIME_FACTOR_TO_USEC) * (const_factor))

#define MLXBF_GIGE_RX_FSM_EQ_ABORT_CYCLES    0x26630
#define MLXBF_GIGE_RX_FSM_EQ_ABORT_VAL(const_factor) \
	((4000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_RX_FSM_EOM_FLOW_CYCLES    0x26634
#define MLXBF_GIGE_RX_FSM_EOM_FLOW_VAL(const_factor) \
	((4000000 / MLXBF_GIGE_TIME_FACTOR_TO_USEC) * (const_factor))

#define MLXBF_GIGE_RX_FSM_CDR_LOCK_CYCLES    0x26638
#define MLXBF_GIGE_RX_FSM_CDR_LOCK_VAL(const_factor) \
	((30000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)
#define MLXBF_GIGE_RX_FSM_CDR_LOCK_MASK      GENMASK(20, 0)

#define MLXBF_GIGE_LANE_PWR_GOV0                   0x26650
#define MLXBF_GIGE_LANE_PWR_GOV0_FALL_VAL(const_factor) \
	((5000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)
#define MLXBF_GIGE_LANE_PWR_GOV0_FALL_MASK         GENMASK(31, 16)
#define MLXBF_GIGE_LANE_PWR_GOV0_RISE_VAL(const_factor) \
	((5000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)
#define MLXBF_GIGE_LANE_PWR_GOV0_RISE_MASK         GENMASK(15, 0)

#define MLXBF_GIGE_LANE_IDDQ_CYCLES                0x26660
#define MLXBF_GIGE_LANE_IDDQ_CYCLES_VAL(const_factor) \
	((2000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)
#define MLXBF_GIGE_LANE_IDDQ_CYCLES_MASK           GENMASK(28, 16)

#define MLXBF_GIGE_LANE_RST_REG                    0x26660
#define MLXBF_GIGE_LANE_RST_REG_MASK               GENMASK(7, 6)

#define MLXBF_GIGE_PERIOD_FLOWS_TIMER_MAX          0x26668
#define MLXBF_GIGE_PERIOD_FLOWS_TIMER_MAX_VAL(const_factor) \
	((2500000 / (MLXBF_GIGE_TIME_FACTOR_TO_USEC * 8)) * (const_factor))
#define MLXBF_GIGE_PERIOD_FLOWS_TIMER_MAX_MASK     GENMASK(22, 0)

#define MLXBF_GIGE_PLL_FSM_CTRL           0x26800
#define MLXBF_GIGE_PLL_FSM_PS_MASK        GENMASK(3, 0)

#define MLXBF_GIGE_PLL_GW                 0x26810
#define MLXBF_GIGE_PLL_GW_ADDR_MASK       GENMASK(10, 1)
#define MLXBF_GIGE_PLL_GW_RW_MASK         GENMASK(11, 11)
#define MLXBF_GIGE_PLL_GW_DATA_MASK       GENMASK(27, 12)
#define MLXBF_GIGE_PLL_GW_DATA_EN_MASK    GENMASK(28, 28)
#define MLXBF_GIGE_PLL_GW_BUSY_MASK       GENMASK(30, 30)
#define MLXBF_GIGE_PLL_GW_ADDR_SHIFT      1
#define MLXBF_GIGE_PLL_GW_DESC0           0x2681c
#define MLXBF_GIGE_PLL_GW_DESC0_DATA_MASK GENMASK(15, 0)

#define MLXBF_GIGE_PLL_SLEEP_FW           0x26820
#define MLXBF_GIGE_PLL_SLEEP_FW_MASK      GENMASK(14, 14)

#define MLXBF_GIGE_PLL_ENABLE             0x26820
#define MLXBF_GIGE_PLL_ENABLE_MASK        GENMASK(1, 1)

#define MLXBF_GIGE_PLL_RCAL               0x26828
#define MLXBF_GIGE_PLL_RCAL_MASK          GENMASK(0, 0)

#define MLXBF_GIGE_PLL_CAL_VLD            0x2682c
#define MLXBF_GIGE_PLL_CAL_VLD_MASK       GENMASK(1, 0)

#define MLXBF_GIGE_PLL_CAL                0x26830
#define MLXBF_GIGE_PLL_CAL_MASK           GENMASK(0, 0)

#define MLXBF_GIGE_PLL1X_CAUSE_CLRCAUSE_BULK      0x26878
#define MLXBF_GIGE_PLL1X_CAUSE_CLRCAUSE_BULK_MASK GENMASK(16, 0)

#define MLXBF_GIGE_PLL1X_FSM_DEFAULT_CYCLES       0x26900
#define MLXBF_GIGE_PLL1X_FSM_DEFAULT_VAL(const_factor) \
	((250 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_PLL1X_FSM_SLEEP_CYCLES         0x26904
#define MLXBF_GIGE_PLL1X_FSM_SLEEP_VAL(const_factor) \
	((5000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_PLL1X_FSM_RCAL_FLOW_CYCLES     0x26908
#define MLXBF_GIGE_PLL1X_FSM_RCAL_FLOW_VAL(const_factor) \
	((40000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_PLL1X_FSM_CAL_FLOW_CYCLES      0x2690c
#define MLXBF_GIGE_PLL1X_FSM_CAL_FLOW_VAL(const_factor) \
	((300000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

#define MLXBF_GIGE_PLL1X_FSM_LOCKDET_STS_CYCLES   0x26910
#define MLXBF_GIGE_PLL1X_FSM_LOCKDET_STS_VAL(const_factor) \
	((100000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)
#define MLXBF_GIGE_PLL1X_FSM_LOCKDET_STS_MASK     GENMASK(18, 0)

#define MLXBF_GIGE_PLL_IDDQ_CYCLES           0x26914
#define MLXBF_GIGE_PLL_IDDQ_CYCLES_VAL(const_factor) \
	((2000 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)
#define MLXBF_GIGE_PLL_IDDQ_CYCLES_MASK      GENMASK(28, 16)

#define MLXBF_GIGE_UPHY_PLL_RST_REG          0x26914
#define MLXBF_GIGE_UPHY_PLL_RST_REG_MASK     GENMASK(2, 2)

#define MLXBF_GIGE_UGL_CR_BRIDGE_DESC       0x26a90
#define MLXBF_GIGE_UGL_CR_BRIDGE_SETUP_MASK GENMASK(5, 0)
#define MLXBF_GIGE_UGL_CR_BRIDGE_PULSE_MASK GENMASK(13, 8)
#define MLXBF_GIGE_UGL_CR_BRIDGE_HOLD_MASK  GENMASK(21, 16)
#define MLXBF_GIGE_UGL_CR_BRIDGE_ALL_MASK \
	(MLXBF_GIGE_UGL_CR_BRIDGE_SETUP_MASK | \
	MLXBF_GIGE_UGL_CR_BRIDGE_PULSE_MASK | \
	MLXBF_GIGE_UGL_CR_BRIDGE_HOLD_MASK)

#define MLXBF_GIGE_UGL_CR_BRIDGE_SETUP_VAL(const_factor) \
	((10 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)
#define MLXBF_GIGE_UGL_CR_BRIDGE_PULSE_VAL(const_factor) \
	((30 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)
#define MLXBF_GIGE_UGL_CR_BRIDGE_HOLD_VAL(const_factor)  \
	((10 * (const_factor)) / MLXBF_GIGE_TIME_FACTOR_TO_USEC)

/* rw = 0 for write and 1 for read.
 * data_en should be set to 1 only for a write transaction.
 */
#define MLXBF_GIGE_PLL_GW_CREATE_CMD(addr, data, rw) \
	((((addr) << MLXBF_GIGE_PLL_GW_ADDR_SHIFT) & MLXBF_GIGE_PLL_GW_ADDR_MASK) | \
	FIELD_PREP(MLXBF_GIGE_PLL_GW_RW_MASK, rw) | \
	FIELD_PREP(MLXBF_GIGE_PLL_GW_DATA_MASK, data) | \
	FIELD_PREP(MLXBF_GIGE_PLL_GW_DATA_EN_MASK, !rw) | \
	FIELD_PREP(MLXBF_GIGE_PLL_GW_BUSY_MASK, 1))

#define MLXBF_GIGE_LANE_GW_CREATE_CMD(addr, data, rw) \
	((((addr) << MLXBF_GIGE_LANE_GW_ADDR_SHIFT) & MLXBF_GIGE_LANE_GW_ADDR_MASK) | \
	FIELD_PREP(MLXBF_GIGE_LANE_GW_RW_MASK, rw) | \
	FIELD_PREP(MLXBF_GIGE_LANE_GW_DATA_MASK, data) | \
	FIELD_PREP(MLXBF_GIGE_LANE_GW_DATA_EN_MASK, !rw) | \
	FIELD_PREP(MLXBF_GIGE_LANE_GW_BUSY_MASK, 1))

#define MLXBF_GIGE_UPHY_GW_CREATE_CMD(addr, data, rw, is_pll) \
	((is_pll) ? MLXBF_GIGE_PLL_GW_CREATE_CMD(addr, data, rw) : \
	MLXBF_GIGE_LANE_GW_CREATE_CMD(addr, data, rw))

#define MLXBF_GIGE_UPHY_GW(is_pll) \
	((is_pll) ? MLXBF_GIGE_PLL_GW : MLXBF_GIGE_LANE_GW)

#define MLXBF_GIGE_UPHY_GW_DESC0(is_pll) \
	((is_pll) ? MLXBF_GIGE_PLL_GW_DESC0 : MLXBF_GIGE_LANE_GW_DESC0)

#define MLXBF_GIGE_UPHY_GW_DESC0_DATA_MASK(is_pll) \
	((is_pll) ? MLXBF_GIGE_PLL_GW_DESC0_DATA_MASK : \
	MLXBF_GIGE_LANE_GW_DESC0_DATA_MASK)

#define MLXBF_GIGE_UPHY_GW_BUSY_MASK(is_pll) \
	((is_pll) ? MLXBF_GIGE_PLL_GW_BUSY_MASK : \
	MLXBF_GIGE_LANE_GW_BUSY_MASK)

/* bootrecord p1clk */
#define MLXBF_GIGE_P1CLK_REG1        0x14
#define MLXBF_GIGE_P1CLK_REG2        0x18
#define MLXBF_GIGE_P1_CORE_F_SHIFT   0
#define MLXBF_GIGE_P1_CORE_F_MASK    GENMASK(25, 0)
#define MLXBF_GIGE_P1_CORE_R_SHIFT   26
#define MLXBF_GIGE_P1_CORE_R_MASK    GENMASK(31, 26)
#define MLXBF_GIGE_P1_CORE_OD_SHIFT  0
#define MLXBF_GIGE_P1_CORE_OD_MASK   GENMASK(3, 0)

#define MLXBF_GIGE_P1CLK_MULT_FACTOR 12
#define MLXBF_GIGE_P1_FREQ_REFERENCE 156250000ULL
#define MLXBF_GIGE_P1_CLK_CONST      16384ULL

/* There is a 32-bit crspace to 16-bit UPHY address encoding.
 * The 16-bit address can be accessed via the GW register.
 * Subtract the crspace region base address from the actual
 * address that needs to be accessed via the gw.
 * Then divide it by 4 since crspace registers are 4 bit aligned
 */
#define MLXBF_GIGE_32B_TO_16B_ADDR(addr, base) (((addr) - (base)) >> 2)

#define MLXBF_GIGE_LANE_CSUM_STS_ADDR \
	MLXBF_GIGE_32B_TO_16B_ADDR( \
	MLXBF_GIGE_AE_SYS_IMEM_RAM_STAT_IMEM_CSUM_STS, \
	MLXBF_GIGE_LANE_CFG_FLAT0_BASE)

#define MLXBF_GIGE_IMEM_CSUM_RUN_AND_VALID              0x3
#define MLXBF_GIGE_INVALID_IMEM_CSUM                    -1

#define MLXBF_GIGE_LANE_IMEM_DATA_ADDR \
	MLXBF_GIGE_32B_TO_16B_ADDR( \
	MLXBF_GIGE_AE_SYS_IMEM_RAM_DATA_CTRL_WDATA, \
	MLXBF_GIGE_LANE_CFG_FLAT0_BASE)

#define MLXBF_GIGE_MGMT_BGAP_FUSE_CTRL_ADDR \
	MLXBF_GIGE_32B_TO_16B_ADDR( \
	MLXBF_GIGE_PLL_CFG_FLAT0_MGMT_BGAP_FUSE_CTRL, \
	MLXBF_GIGE_PLL_CFG_FLAT0_BASE)

#define MLXBF_GIGE_YU_BG_TRIM_ROOM_MASK   GENMASK(4, 0)
#define MLXBF_GIGE_YU_BG_TRIM_ROOM_SHIFT  0
#define MLXBF_GIGE_YU_CVB_TRIM_ROOM_MASK  GENMASK(9, 5)
#define MLXBF_GIGE_YU_CVB_TRIM_ROOM_SHIFT 5
#define MLXBF_GIGE_YU_SPEEDO_ROOM_MASK    GENMASK(14, 10)
#define MLXBF_GIGE_YU_SPEEDO_ROOM_SHIFT   10
#define MLXBF_GIGE_YU_FUSE_VALID_SHIFT    4
/* Fuse mask without valid bit */
#define MLXBF_GIGE_YU_FUSE_MASK           0xf

enum {
	MLXBF_GIGE_UGL_PLL1X_FSM_STATE_IDDQ,
	MLXBF_GIGE_UGL_PLL1X_FSM_STATE_SLEEP,
	MLXBF_GIGE_UGL_PLL1X_FSM_STATE_RCAL_DONE_WAIT1,
	MLXBF_GIGE_UGL_PLL1X_FSM_STATE_RCAL_DONE_WAIT0,
	MLXBF_GIGE_UGL_PLL1X_FSM_STATE_IDLE,
	MLXBF_GIGE_UGL_PLL1X_FSM_STATE_CAL_DONE_WAIT1,
	MLXBF_GIGE_UGL_PLL1X_FSM_STATE_CAL_DONE_WAIT0,
	MLXBF_GIGE_UGL_PLL1X_FSM_STATE_ACTIVE,
	MLXBF_GIGE_UGL_PLL1X_FSM_STATE_LOCK,
	MLXBF_GIGE_UGL_PLL1X_FSM_STATE_SPEED_CHANGE
};

enum {
	MLXBF_GIGE_TX_FSM_IDDQ,
	MLXBF_GIGE_TX_FSM_SLEEP,
	MLXBF_GIGE_TX_FSM_SPEED_CHANGE,
	MLXBF_GIGE_TX_FSM_POWERUP,
	MLXBF_GIGE_TX_UGL_TX_POWERUP,
	MLXBF_GIGE_TX_CAL_DONE_WAIT1,
	MLXBF_GIGE_TX_CAL_ABORT,
	MLXBF_GIGE_TX_CAL_ABORT_DONE_WAIT1,
	MLXBF_GIGE_TX_CAL_DONE_WAIT0,
	MLXBF_GIGE_TX_CAL_DONE,
	MLXBF_GIGE_TX_DATA_READY,
	MLXBF_GIGE_TX_DATA_EN_RDY,
	MLXBF_GIGE_TX_DATA_EN
};

enum {
	MLXBF_GIGE_RX_FSM_IDDQ,
	MLXBF_GIGE_RX_FSM_SLEEP,
	MLXBF_GIGE_RX_FSM_SPEED_CHANGE,
	MLXBF_GIGE_RX_FSM_POWERUP,
	MLXBF_GIGE_RX_FSM_CAL,
	MLXBF_GIGE_RX_FSM_WAIT_TERM,
	MLXBF_GIGE_RX_FSM_DATA_EN_RDY,
	MLXBF_GIGE_RX_FSM_DATA_EN,
	MLXBF_GIGE_RX_FSM_CDR_EN,
	MLXBF_GIGE_RX_FSM_ACTIVE,
	MLXBF_GIGE_RX_FSM_EQ,
	MLXBF_GIGE_RX_FSM_EOM
};

#define MLXBF_GIGE_PLL_STAB_TIME             6 /* us */
#define MLXBF_GIGE_PLL_DLM_IMEM_CSUM_TIMEOUT 15 /* us */

struct mlxbf_gige_uphy_cfg_reg {
	u16 addr;
	u16 wdata;
};

int mlxbf_gige_config_uphy(struct mlxbf_gige *priv);

#endif /* __MLXBF_GIGE_UPHY_H__ */
